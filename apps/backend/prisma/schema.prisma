

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  EMPLOYEE
  FARMER
  CUSTOMER
}

enum ProductNames {
  BROILER
  DESHI
  SONALI
  DUCK
}

enum OrderStatus {
  PENDING
  ASSIGNED
  COLLECTING
  DELIVERED
  BILLED
  CANCELLED
}

enum OwnerOrderStatus {
  PENDING
  READY_FOR_PICKING
  PICKED_UP
  CANCELLED
}

enum CollectionStatus {
  ASSIGNED
  START_PICKING
  END_PICKING
  START_DELIVERY
  END_DELIVERY
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIAL
}

model User {
  id          String           @id @default(uuid())
  name        String
  phone       String           @unique
  password    String
  role        UserRole
  address     String?
  imageUrl    String?
  businessId  String?          @unique // Only one business per user(owner)
  createdAt   DateTime         @default(now())

  // Relations
  business    Business?   @relation("Owner_Business_11",fields: [businessId], references: [id])
  farmStocks  FarmStock[] @relation("Farmer_FarmStock_1M") // One-to-many (Farmer → FarmStocks)
  userBusinesses UserBusiness[] @relation("User_Business_MM") // Many-to-many via join table UserBusiness
  ownerOrders OwnerOrder[] @relation("User_OwnerOrders_1M") // One-to-many (Owner → OwnerOrders)


  @@map("user")
}

model Business {
  id          String        @id @default(uuid())
  name        String
  ownerId     String        @unique
  description String?
  imageUrl    String?
  address     String?
  createdAt   DateTime      @default(now())

  // Relations
  owner       User?      @relation("Owner_Business_11")
  userBusinesses UserBusiness[] @relation("Business_User_MM") // Many-to-many via join table UserBusiness
  stockForBusinesses FarmStockforBusiness[] @relation("Business_FarmStock_MM") // One-to-many (Business → FarmStocks)
  collections     Collection[] @relation("Business_Collections_1M")
  orders         Order[]      @relation("Business_Orders_1M") // One-to-many (Business → Orders)
  ownerOrders    OwnerOrder[] @relation("Business_OwnerOrders_1M") // One-to-many (Business → OwnerOrders)

  @@map("business")
}

model UserBusiness {
  id         String   @id @default(uuid())
  userId     String
  businessId String
  role       UserRole

  // Relations
  user       User     @relation("User_Business_MM", fields: [userId], references: [id]) // without User(owner)
  business   Business @relation("Business_User_MM", fields: [businessId], references: [id])
  collections Collection[] @relation("UserBusiness_Collections_1M")
  orders    Order[] @relation("UserBusiness_Orders_1M")
  ownerOrders OwnerOrder[] @relation("Employee_OwnerOrders_1M")

  @@unique([userId, businessId], name: "unique_user_business")
  @@map("user_business")
}

model Order {
  id              String        @id @default(uuid())
  customerId      String
  businessId      String
  assignedToId    String?
  productName     ProductNames
  quantityKg      Int
  totalPrice      Float
  deliveryAddress String
  deliveryTime    DateTime
  collectionId    String?
  deliveryStatus  OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  collection    Collection? @relation("Collection_Orders_1M", fields: [collectionId], references: [id]) 
  userBusiness UserBusiness @relation("UserBusiness_Orders_1M", fields: [customerId], references: [id])
  business      Business    @relation("Business_Orders_1M", fields: [businessId], references: [id])

  @@map("order")
}

model FarmStock {
  id           String        @id @default(uuid())
  farmerId     String
  imageUrl     String?
  productName  ProductNames
  description  String?
  pricePerKg   Float
  availableKg  Int
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  farmer       User         @relation("Farmer_FarmStock_1M", fields: [farmerId], references: [id]) // Many-to-one
  stockForBusinesses FarmStockforBusiness[] @relation("FarmStock_Business_MM") // Many-to-many via join table FarmStockforBusiness

  @@map("farm_stock")
}

model FarmStockforBusiness {
  id           String        @id @default(uuid())
  businessId  String
  farmStockId String

  pricePerKg   Float?
  availableKg  Int?
  isActive     Boolean?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  business     Business @relation("Business_FarmStock_MM", fields: [businessId], references: [id])
  farmStock    FarmStock @relation("FarmStock_Business_MM", fields: [farmStockId], references: [id])
  ownerOrders OwnerOrder[] @relation("FarmStockforBusiness_OwnerOrders_1M")

  @@unique([businessId, farmStockId])
  @@map("farm_stock_for_business")
}

model Collection {
  id                String        @id @default(uuid())
  employeeId        String
  businessId        String
  collectionTargetKg Int?             @default(0)
  collectedKg       Int?              @default(0)
  collectionStatus  CollectionStatus  @default(ASSIGNED)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  business         Business     @relation("Business_Collections_1M", fields: [businessId], references: [id])
  employee         UserBusiness @relation("UserBusiness_Collections_1M", fields: [employeeId], references: [id])
  orders           Order[]      @relation("Collection_Orders_1M")
  ownerOrders      OwnerOrder[] @relation("Collection_OwnerOrders_1M")


  @@map("collection")
}

model OwnerOrder {
  id               String           @id @default(uuid())
  farmStockIdforBusiness  String
  ownerId          String
  businessId       String
  assignedToId     String?
  productName      ProductNames
  quantityKg       Int
  totalPrice       Float
  collectionId     String?
  pickupTime       DateTime?
  createdAt        DateTime         @default(now())
  ownerOrderStatus OwnerOrderStatus @default(PENDING)
  paymentStatus    PaymentStatus    @default(UNPAID)

  // Relations
  collection   Collection? @relation("Collection_OwnerOrders_1M", fields: [collectionId], references: [id])
  owner        User       @relation("User_OwnerOrders_1M", fields: [ownerId], references: [id])
  FarmStockforBusiness FarmStockforBusiness @relation("FarmStockforBusiness_OwnerOrders_1M", fields: [farmStockIdforBusiness], references: [id])
  business    Business     @relation("Business_OwnerOrders_1M", fields: [businessId], references: [id])
  employee    UserBusiness? @relation("Employee_OwnerOrders_1M", fields: [assignedToId], references: [id])
  @@map("owner_order")
}
